// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  name              String?
  email             String?   @unique
  emailVerified     DateTime?
  verificationToken String?
  image             String?
  hashedPassword    String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  favouriteIds      String[]  @db.ObjectId
  role              String    @default("user") // "admin" or "user"

  stripeAccountId          String?
  stripeOnboardingComplete Boolean @default(false)

  subscriptionOption    String? // "flat_fee" or "booking_fee"
  subscriptionExpiresAt DateTime?

  accounts      Account[]
  listings      Listing[]
  reservations  Reservation[]
  comments      Comment[]
  subscriptions Subscription[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Listing {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  title               String
  description         String
  imageSrc            String[]
  createdAt           DateTime @default(now())
  category            String[]
  experience          Int
  maxDays             Int
  minDays             Int
  locationValue       String
  locationCoordinates String[]
  userId              String   @db.ObjectId
  price               Int
  averageRating       Float?   @default(0.0)
  numberOfRatings     Int?     @default(0)
  approved            Boolean  @default(false)

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  reservations Reservation[]
  comments     Comment[]
}

// updated reservations table
model Reservation {
  id                    String   @id @default(auto()) @map("_id") @db.ObjectId
  listingId             String   @db.ObjectId
  status                String   @default("escrow") // escrow, refunded, completed
  userId                String   @db.ObjectId
  receiverId            String   @db.ObjectId
  userAccount           String
  receiverAccount       String
  startDate             DateTime
  endDate               DateTime
  totalPrice            Int
  stripePaymentIntentId String
  createdAt             DateTime @default(now())
  approved              Boolean? @default(false)

  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  listings Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  text      String?
  createdAt DateTime @default(now())
  userId    String   @db.ObjectId
  listingId String   @db.ObjectId
  rating    Int?

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

model Subscription {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  stripeCustomerId     String?
  stripeSubscriptionId String?  @unique
  userId               String   @db.ObjectId
  status               String
  plan                 String
  currentPeriodEnd     DateTime
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
